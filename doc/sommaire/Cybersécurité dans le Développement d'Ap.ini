Cybersécurité dans le Développement d'Applications Web
1. Front-end
1.1 Protection contre les failles XSS
Utiliser l'échappement des entrées utilisateurs.
Implémenter des Content Security Policies (CSP).
Valider et nettoyer les entrées côté client et serveur.
1.2 Gestion des pages d'erreur
Ne pas afficher les logs et stack traces.
Créer des pages d'erreur génériques pour les erreurs 400, 403, 404, 500.
1.3 Sécurité de la page de connexion
Implémenter une authentification à plusieurs facteurs (MFA).
Restreindre le nombre de tentatives de connexion.
1.4 Bonnes pratiques des mots de passe
Exiger un mot de passe fort (min/max caractères, majuscules, chiffres, caractères spéciaux).
Empêcher l'utilisation de mots de passe courants.
1.5 Validation des champs
Définir des contraintes (min, max, regex, required).
Empêcher l'injection de code malveillant.
2. Back-end
2.1 Protection contre les attaques CSRF
Utiliser des tokens CSRF pour les requêtes sensibles.
Implémenter SameSite cookies pour limiter l’exposition.
2.2 Mise à jour des logiciels et bibliothèques
Maintenir Spring Boot et les dépendances à jour.
Effectuer une veille sur les vulnérabilités connues.
2.3 Utilisation de Spring Security
Mettre en place une authentification robuste.
Implémenter un système de rôles et permissions.
2.4 Protection contre l'injection SQL
Utiliser des requêtes paramétrées.
Interdire les entrées utilisateurs non validées dans les requêtes SQL.
2.5 Gestion des sessions utilisateur
Définir une durée de session raisonnable.
Implémenter la déconnexion automatique après inactivité.
2.6 Communication sécurisée
Forcer l’utilisation du protocole HTTPS.
Utiliser des certificats SSL/TLS valides.
2.7 Segmentation des routes
Protéger les routes sensibles.
Distinguer les routes accessibles au public et celles nécessitant une authentification.
2.8 Gestion des logs applicatifs
Ne pas stocker d’informations sensibles en clair.
Anonymiser certaines données si nécessaire.
2.9 Protection contre les attaques DDoS
Implémenter un système de rate limiting.
Utiliser un WAF (Web Application Firewall).
3. Base de données
3.1 Gestion des relations et suppression en cascade
Définir les contraintes de suppression et de mise à jour pour éviter les incohérences.
3.2 Protection des mots de passe
Utiliser un algorithme de hachage robuste (ex: BCrypt).
Ne jamais stocker de mots de passe en clair.
3.3 Chiffrement de la base de données
Utiliser des algorithmes de chiffrement pour les données sensibles.
3.4 Gestion des logs de la base de données
Surveiller et auditer les accès et modifications.
Stocker les logs dans un emplacement sécurisé.
3.5 Sauvegarde de la base de données
Mettre en place des sauvegardes régulières.
Tester régulièrement la restauration des sauvegardes.
3.6 Contraintes et permissions
Définir des contraintes d’intégrité (UNIQUE, NOT NULL, FOREIGN KEY).
Restreindre les droits des utilisateurs en base de données.
3.7 typage de champs
Utiliser des types de données appropriés pour éviter les erreurs de conversion.
4. Bonnes pratiques de développement
4.1 Gestion des fichiers de configuration
Utiliser des fichiers .env pour les informations sensibles.
Ajouter .env et autres fichiers sensibles au .gitignore.
4.2 Mise en place d'alertes
Configurer des alertes en cas d'activité suspecte.
4.3 Tests unitaires et sécurité
Implémenter des tests pour détecter les vulnérabilités.
Automatiser les tests de sécurité.